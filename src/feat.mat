imds = imageDatastore('C:\Users\Lakshmi Prabha\Downloads\archive\New Plant Diseases Dataset(Augmented)\New Plant Diseases Dataset(Augmented)\train','IncludeSubfolders',true,'LabelSource','foldernames');
[imdsTrain,imdsValidation] = splitEachLabel(imds,0.7);
%edit(fullfile(matlabroot,'examples','nnet','main','findLayersToReplace.m'))
net=efficientnetb0;
analyzeNetwork(net);
inputSize = net.Layers(1).InputSize;
if isa(net,'SeriesNetwork')
lgraph = layerGraph(net.Layers);
else
lgraph = layerGraph(net);
end
[learnableLayer,classLayer] = findLayersToReplace(lgraph);
findLayersToReplace(lgraph)
[learnableLayer,classLayer] = findLayersToReplace(lgraph);
numClasses = numel(categories(imdsTrain.Labels));
if isa(learnableLayer,'nnet.cnn.layer.FullyConnectedLayer')
newLearnableLayer = fullyConnectedLayer(numClasses, ...
'Name','new_fc', ...
'WeightLearnRateFactor',10, ...
'BiasLearnRateFactor',10);
elseif isa(learnableLayer,'nnet.cnn.layer.Convolution2DLayer')
newLearnableLayer = convolution2dLayer(1,numClasses, ...
'Name','new_conv', ...
'WeightLearnRateFactor',10, ...
'BiasLearnRateFactor',10);
end
lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);
figure('Units','normalized','Position',[0.3 0.3 0.4 0.4]);
plot(lgraph)
ylim([0,10])
layers = lgraph.Layers;
connections = lgraph.Connections;
layers(1:10) = freezeWeights(layers(1:10));
lgraph = createLgraphUsingConnections(layers,connections);
pixelRange = [-30 30];
scaleRange = [0.9 1.1];
imageAugmenter = imageDataAugmenter('RandXReflection',true, 'RandXTranslation',pixelRange,'RandYTranslation',pixelRange, 'RandXScale',scaleRange, 'RandYScale',scaleRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain,'DataAugmentation',imageAugmenter,'ColorPreprocessing', 'gray2rgb' );
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation,'ColorPreprocessing', 'gray2rgb' );
freezeWeights
freezeWeights(layers)
options =trainingOptions('adam', ...
'InitialLearnRate',3e-4, ...
'SquaredGradientDecayFactor',0.99, ...
'MaxEpochs',5, ...
'MiniBatchSize',16, ...
'ValidationData', augimdsValidation,...
'ValidationFrequency', 50,...
'Plots','training-progress');
layers(1:10) = freezeWeights(layers(1:10));
lgraph = createLgraphUsingConnections(layers,connections);
pixelRange = [-30 30];
scaleRange = [0.9 1.1];
imageAugmenter = imageDataAugmenter('RandXReflection',true, 'RandXTranslation',pixelRange,'RandYTranslation',pixelRange, 'RandXScale',scaleRange, 'RandYScale',scaleRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain,'DataAugmentation',imageAugmenter,'ColorPreprocessing', 'gray2rgb' );
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation,'ColorPreprocessing', 'gray2rgb' );
options =trainingOptions('adam', ...
'InitialLearnRate',3e-4, ...
'SquaredGradientDecayFactor',0.99, ...
'MaxEpochs',5, ...
'MiniBatchSize',16, ...
'ValidationData', augimdsValidation,...
'ValidationFrequency', 50,...
'Plots','training-progress');
[net, info] = trainNetwork(augimdsTrain,lgraph,options);
[YPred,probs] = classify(net,augimdsValidation);
accuracy = mean(YPred == imdsValidation.Labels);
idx = randperm(numel(imdsValidation.Files),4);
figure
for i = 1:4
subplot(2,2,i)
I = readimage(imdsValidation,idx(i));
imshow(I)
label = YPred(idx(i));
alabel=imdsValidation.Labels(idx(i));
title("Actual label.."+string(alabel)+" Predicted as.."+ string(label) + ", " + num2str(100*max(probs(idx(i),:)),3) + "%");
end
